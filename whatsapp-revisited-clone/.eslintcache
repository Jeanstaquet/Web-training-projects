[{"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\index.js":"1","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\App.js":"2","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\reportWebVitals.js":"3","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\Auth\\Auth.js":"4","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\Chat\\Chat.js":"5","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\Conversations\\Conversations.js":"6","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\Conversation\\Conversation.js":"7","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\Message\\Message.js":"8","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\store\\reducer\\auth.js":"9","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\store\\action\\index.js":"10","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\store\\action\\auth.js":"11","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\firebase.js":"12","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\Spinner\\Spinner.js":"13","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\Modal\\Modal.js":"14","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\Backdrop\\Backdrop.js":"15","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\FeatureMenu\\FeatureMenu.js":"16"},{"size":984,"mtime":1607904285347,"results":"17","hashOfConfig":"18"},{"size":700,"mtime":1609628325978,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":4826,"mtime":1610365821936,"results":"21","hashOfConfig":"18"},{"size":8015,"mtime":1610375675320,"results":"22","hashOfConfig":"18"},{"size":5473,"mtime":1610367166738,"results":"23","hashOfConfig":"18"},{"size":1828,"mtime":1608391192812,"results":"24","hashOfConfig":"18"},{"size":383,"mtime":1610405675439,"results":"25","hashOfConfig":"18"},{"size":3425,"mtime":1609622710675,"results":"26","hashOfConfig":"18"},{"size":182,"mtime":1609622761217,"results":"27","hashOfConfig":"18"},{"size":4229,"mtime":1609622780313,"results":"28","hashOfConfig":"18"},{"size":817,"mtime":1609627946530,"results":"29","hashOfConfig":"18"},{"size":219,"mtime":1608030482749,"results":"30","hashOfConfig":"18"},{"size":2017,"mtime":1610366592312,"results":"31","hashOfConfig":"18"},{"size":288,"mtime":1608256393575,"results":"32","hashOfConfig":"18"},{"size":2292,"mtime":1610363401788,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"cln990",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\index.js",[],["72","73"],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\App.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\reportWebVitals.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\Auth\\Auth.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\Chat\\Chat.js",["74","75","76"],"import React, { useEffect, useState } from 'react';\r\nimport \"./Chat.scss\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport { Avatar, IconButton  } from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport Message from \"../../components/Message/Message\";\r\nimport db, {storage} from \"../../firebase\";\r\nimport firebase from \"firebase\"\r\nimport {connect} from \"react-redux\";\r\nimport Picker from 'emoji-picker-react';\r\nconst Chat = (props) => {\r\n\r\n    const [mess, setMessage] = useState(\"\");\r\n    const [messageCanal, setMessageCanal] = useState([])\r\n    const [showEmoji, setShowEmoji] = useState(false);\r\n    const [showAddFile, setShowAddFile] = useState(false);\r\n    const [fileSend, setFileSend] = useState(null);\r\n    const [fileError, setFileError] = useState(false)\r\n\r\n    let iconSend = mess.length < 1 ? <MicIcon className=\"chat__sendMessageMic\"/> : <SendIcon onClick={(e) => sendMessage(e, mess)} className=\"chat__sendMessageMic\"/>\r\n\r\n    useEffect(() => {\r\n        if(props.userId && props.roomName) {\r\n            db\r\n            .collection(\"Users\")\r\n            .doc(props.userId)\r\n            .collection(\"conversations\")\r\n            .doc(props.roomName)\r\n            .collection(\"messages\")\r\n            .orderBy(\"timestamp\", \"asc\")\r\n            .onSnapshot(snapshot => (\r\n                setMessageCanal(snapshot.docs.map(doc => (\r\n                    {\r\n                        data: doc.data()\r\n                    }\r\n                )))\r\n            ))\r\n        }\r\n    }, [props.roomName, props.userId]);\r\n\r\n    const sendMessage = (event) => {\r\n        if(event) {\r\n            event.preventDefault()\r\n        }\r\n        //Query for the current user\r\n        db\r\n            .collection(\"Users\")\r\n            .doc(props.userId)\r\n            .collection(\"conversations\")\r\n            .doc(props.roomName)\r\n            .collection(\"messages\")\r\n            .add({\r\n                message: mess,\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                sender: props.pseudo.pseudo\r\n            })\r\n        //Query for the contact     \r\n        db\r\n        .collection(\"Users\")\r\n        .doc(props.contactData.userId)\r\n        .collection(\"conversations\")\r\n        .doc(props.roomName)\r\n        .collection(\"messages\")\r\n        .add({\r\n            message: mess,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            sender: props.pseudo.pseudo\r\n        })\r\n\r\n            setMessage(\"\");\r\n    }\r\n\r\n    const fileHandler = (event) => {\r\n        if(event.target.files[0]) {\r\n            if(event.target.files[0].type === \"image/jpeg\" || event.target.files[0].type === \"image/png\") {\r\n\r\n            } else {\r\n                setFileError(true) \r\n                console.log(\"jjj\")\r\n                setTimeout(() => {\r\n                    setFileError(false) \r\n                }, 5000)\r\n                event.target.value = null\r\n                \r\n            }\r\n            setFileSend(event.target.files[0])\r\n        }\r\n    }\r\n    \r\n\r\n    const fileUploadHandler = (event) => {\r\n        event.preventDefault()\r\n        const upload = storage.ref(`images/${fileSend.name}`).put(fileSend)\r\n        \r\n        storage\r\n            .ref(\"images\")\r\n            .child(fileSend.name)\r\n            .getDownloadURL()\r\n            .then(url => {\r\n                console.log(url)\r\n                        //Query for the current user\r\n                db\r\n                .collection(\"Users\")\r\n                .doc(props.userId)\r\n                .collection(\"conversations\")\r\n                .doc(props.roomName)\r\n                .collection(\"messages\")\r\n                .add({\r\n                    message: \"img\",\r\n                    imgUrl: url,\r\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                    sender: props.pseudo.pseudo\r\n                })\r\n\r\n                        //Query for the contact     \r\n                db\r\n                .collection(\"Users\")\r\n                .doc(props.contactData.userId)\r\n                .collection(\"conversations\")\r\n                .doc(props.roomName)\r\n                .collection(\"messages\")\r\n                .add({\r\n                    message: \"img\",\r\n                    imgUrl: url,\r\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                    sender: props.pseudo.pseudo\r\n                })\r\n\r\n\r\n            })\r\n            setShowAddFile(false)\r\n    }\r\n\r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setShowEmoji(false)\r\n        setMessage(mess + emojiObject.emoji)\r\n    };\r\n\r\n    const displayEmojiHandler = () => {\r\n        setShowEmoji(!showEmoji)\r\n    }\r\n\r\n    const displayFileHandler = () => {\r\n        setShowAddFile(!showAddFile)\r\n    }\r\n    \r\n    let messageBody = document.querySelector('.chat__content');\r\n    if(messageBody) {\r\n        messageBody.scrollTop = messageBody.scrollHeight - messageBody.clientHeight;\r\n    }\r\n    return (\r\n        <div className=\"chat__container\">\r\n            <div className=\"chat__banner\">\r\n                <div className=\"chat__bannerInfo\">\r\n                    <Avatar className=\"chat__bannerAvatar\">{props.contact ? props.contact[0] : null}</Avatar>\r\n                    <div className=\"chat__info\">\r\n                        <p>{props.contact}</p>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"chat__bannerIcon\">\r\n                    <SearchIcon/>\r\n                    <MoreHorizIcon/>\r\n                </div>\r\n            </div>\r\n            <div className=\"chat__content\">\r\n                <div className={showAddFile ? \"chat__addFileModal\" : \"notShow\"}>\r\n                    <form style={{border: fileError ? \"1px solid red\" : null}}>\r\n                        <p style={{display: fileError ? \"block\": \"none\"}}>This not a valid file type</p>\r\n                        <input type=\"file\" onChange={fileHandler}/>\r\n                        <input type=\"submit\" disabled={fileError || fileSend === null ? true : false} onClick={fileUploadHandler}/>\r\n                    </form>\r\n                </div>\r\n                {showEmoji && props.roomName ? <Picker onEmojiClick={onEmojiClick} disableSearchBar={true} /> : null}\r\n                {messageCanal.map((room, index) => (\r\n                    <Message key={index} \r\n                             message={room.data.imgUrl ? null : room.data.message} \r\n                             img={room.data.imgUrl}\r\n                             reciever={room.data.sender == props.pseudo.pseudo ? false : true}\r\n                             timestamp={room.data.timestamp ? (new Date(room.data.timestamp.seconds * 1000)).toLocaleDateString('en-UK') : null} />\r\n                ))}\r\n            </div>\r\n            <div className=\"chat__sendMessage\">\r\n                <div className=\"chat__sendMessageEmoji\">\r\n                    <InsertEmoticonIcon onClick={displayEmojiHandler}/>\r\n                    <AttachFileIcon onClick={displayFileHandler}/>\r\n                </div>\r\n                <form className=\"chat__sendMessageContent\">\r\n                    <input disabled={props.roomName===null} type=\"text\" onChange={(e) => setMessage(e.target.value)} value={mess}/>\r\n                    <button type=\"submit\" onClick={(event) => sendMessage(event, mess)}></button>\r\n                </form>\r\n                {iconSend}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userId: state.userId,\r\n        roomName: state.roomName,\r\n        email: state.email,\r\n        pseudo: state.pseudo,\r\n        contact: state.contact,\r\n        contactData: state.contactDetails\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, null)(Chat);","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\Conversations\\Conversations.js",["77"],"import React, {useEffect, useState} from 'react';\r\nimport \"./Conversations.scss\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport { Avatar } from '@material-ui/core';\r\nimport Conversation from \"../../components/Conversation/Conversation\";\r\nimport {connect} from \"react-redux\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Modal from \"../../components/UI/Modal/Modal\";\r\nimport db from \"../../firebase\";\r\nimport FeatureMenu from \"../FeatureMenu/FeatureMenu\";\r\nimport * as actions from \"../../store/action/index\"\r\nconst Conversations = (props) => {\r\n    const [modal, setModal] = useState(false); \r\n    const [conversationName, setConversationName] = useState(\"\");\r\n    const [fetchedConversations, setFetchecConversations] = useState([])\r\n    const [contact, setContact] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [menuOpenClose, setMenuOpenClose] = useState(true)\r\n    const toggleModal = () => {\r\n        setModal(true)\r\n    }\r\n\r\n    const toggleModalClose = (e) => {\r\n        e.preventDefault();\r\n        setModal(false)\r\n    }\r\n\r\n    const changeModalHandler = (e) => {\r\n        setConversationName(e.target.value)\r\n    }\r\n\r\n\r\n    const changeContactHandler = (e) => {\r\n        setContact(e.target.value)\r\n    }\r\n\r\n    const addConversationHandler = (e) => {\r\n        e.preventDefault()\r\n        if(contact.length === 0 || conversationName.length === 0) {\r\n            setErrorMessage(\"You have to add an chat name and/or a valid pseudo name\")\r\n            setTimeout(() => {\r\n                setErrorMessage(\"\")\r\n            }, 2500)\r\n        } else {\r\n            checkPseudo(contact)\r\n        }\r\n\r\n    }\r\n\r\n    const checkPseudo = (name) => {\r\n        db.collection(\"Users\").where(\"pseudo\", \"==\", name)\r\n        .get()\r\n        .then((querySnapshot) => {\r\n            if(querySnapshot.empty) {\r\n                setErrorMessage(\"This userd don't exist\")\r\n                setTimeout(() => {\r\n                    setErrorMessage(\"\")\r\n                }, 2500)\r\n            }\r\n            querySnapshot.forEach(function(doc) {\r\n                props.contactDetails(doc.data())\r\n                db.collection(\"Users\").doc(props.userId).collection(\"conversations\").doc(conversationName).set({\r\n                    name: conversationName,\r\n                    contact: doc.data()\r\n\r\n                })\r\n\r\n                db.collection(\"Users\").doc(doc.data().userId).collection(\"conversations\").doc(conversationName).set({\r\n                    name: conversationName,\r\n                    contact: props.dataForContact\r\n                })\r\n                setConversationName(\"\");\r\n                setModal(false)\r\n            });\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const unsubcribe = db.collection(\"Users\")\r\n                ?.doc(props.userId)\r\n                ?.collection(\"conversations\")\r\n                .onSnapshot(snapshot => setFetchecConversations(snapshot.docs.map((doc) => doc.data())))\r\n    \r\n        return () => {\r\n            unsubcribe();\r\n        }\r\n    \r\n    }, [])\r\n\r\n    const handleMenu = () => {\r\n        setMenuOpenClose(!menuOpenClose)\r\n    }\r\n\r\n    return (\r\n        <div className=\"converstations__container\" >\r\n            <FeatureMenu toggle={handleMenu} open={menuOpenClose}/>\r\n            <Modal show={modal} \r\n                   click={toggleModalClose} \r\n                   change={changeModalHandler}\r\n                   changeContact={changeContactHandler} \r\n                   ok={addConversationHandler}\r\n                   errorMessage={errorMessage}/>\r\n            <div className=\"conv__account\">\r\n                <Avatar className=\"conv__avatar\" src={props.photo}>{props.pseudo !== null ? props.pseudo.pseudo[0] : null}</Avatar>\r\n                <button onClick={handleMenu}>MENU</button>\r\n                <div className=\"conv__accountIcons\">\r\n                    <Tooltip title=\"Add a new feature\" arrow>\r\n                        <AddIcon/>\r\n                    </Tooltip>\r\n \r\n                    <MoreHorizIcon/>\r\n                </div>\r\n            </div>\r\n            <div className=\"conv__searchBar\">\r\n                <input type=\"text\"/>\r\n                <SearchIcon className=\"conv__glass\"/>\r\n            </div>\r\n            <div className=\"conv__list\">\r\n                <Conversation addNewConv={true} click={toggleModal}/>\r\n                {fetchedConversations.map((conv, i) => {\r\n                    return <Conversation key={i} \r\n                                         name={conv.name} \r\n                                         roomname={conv.name}\r\n                                         dispatchRoomName={() => props.roomNameHandler(conv.name, conv.contact.pseudo, conv.contact)}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        photo: state.photo,\r\n        userId: state.userId,\r\n        pseudo: state.pseudo,\r\n        contactData: state.contactDetails,\r\n        dataForContact: state.pseudo,\r\n        isAuth: state.userId !== null\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        roomNameHandler: (r, c, d) => dispatch(actions.roomNameHandler(r, c, d)),\r\n        contactDetails: (d) => dispatch(actions.contactDetails(d))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Conversations);","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\Conversation\\Conversation.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\Message\\Message.js",["78"],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\store\\reducer\\auth.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\store\\action\\index.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\store\\action\\auth.js",["79"],"import axios from \"axios\";\r\nimport db, {auth, provider} from \"../../firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: \"AUTH_START\"\r\n    }\r\n}\r\n\r\nexport const authSuccess = (token, userId, expirationTime) => {\r\n    return {\r\n        type: \"AUTH_SUCCESS\",\r\n        token: token,\r\n        userId: userId,\r\n        expirationTime: expirationTime\r\n    }\r\n}\r\n\r\nexport const authFail = (message) => {\r\n    return {\r\n        type: \"AUTH_FAIL\",\r\n        message: message\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type: \"LOGOUT\"\r\n    }\r\n}\r\n\r\nexport const authReset = () => {\r\n    return {\r\n        type: \"AUTH_RESET\"\r\n    }\r\n}\r\n\r\nexport const pseudoHandler = (pseudo) => {\r\n    return {\r\n        type: \"PSEUDO_HANDLER\",\r\n        pseudo: pseudo\r\n    }\r\n}\r\n\r\nexport const authEP = (email, password, pseudo, isRegister) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        const data = {\r\n            email: email,\r\n            password: password, \r\n            pseudo: pseudo\r\n        }\r\n        let url = \"\"\r\n        if(isRegister) {\r\n            url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCmXjwaVbRraK5e8ZLQu-P5d-NuO85ramQ\";\r\n\r\n        }\r\n        \r\n        if(!isRegister) {\r\n            url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCmXjwaVbRraK5e8ZLQu-P5d-NuO85ramQ\"\r\n        }\r\n        let pseudoFetched = null\r\n        axios.post(url, data)\r\n            .then(res => {\r\n                if(isRegister) {\r\n                    db.collection(\"Users\").doc(res.data.localId).set({\r\n                        userId: res.data.localId,\r\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                        email: email,\r\n                        pseudo: pseudo,\r\n                        password: password\r\n                    });\r\n                } else {\r\n\r\n                }\r\n                db.collection(\"Users\").where(\"userId\", \"==\", res.data.localId)\r\n                .get()\r\n                .then((querySnapShot) => {\r\n                    querySnapShot.forEach(function(doc) {\r\n                        dispatch(pseudoHandler(doc.data()))\r\n                    })\r\n                })\r\n                dispatch(authSuccess(res.data.idToken, res.data.localId, 60))\r\n            })\r\n            .catch(error => {\r\n                dispatch(authFail(error.response.data.error.message))\r\n                setTimeout(() => {\r\n                    dispatch(authReset())\r\n                }, 5000);\r\n        })\r\n    }\r\n}\r\n\r\nexport const googleAuth = (token, userId, photo, isNew, email) => {\r\n    return {\r\n        type: \"SIGN_WITH_GOOGLE\",\r\n        token: token,\r\n        userId: userId,\r\n        photo: photo,\r\n        isNew: isNew,\r\n        email: email\r\n    }\r\n}\r\n\r\nexport const signWithGoogle = () => {\r\n    return dispatch => {\r\n        auth\r\n        .signInWithPopup(provider)\r\n        .then(result => {\r\n            dispatch(googleAuth(result.credential.idToken, \r\n                                result.additionalUserInfo.profile.id, \r\n                                result.additionalUserInfo.profile.picture, \r\n                                result.additionalUserInfo.isNewUser,\r\n                                result.additionalUserInfo.profile.email));\r\n            if(result.additionalUserInfo.isNew) {\r\n                db.collection(\"Users\").add({\r\n                    userId: result.additionalUserInfo.profile.id,\r\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                    email: result.additionalUserInfo.profile.email,\r\n                    password: \"googleConnection\"\r\n                });\r\n            }\r\n            \r\n        })\r\n    }\r\n}\r\n\r\nexport const roomNameHandler = (roomName, contact, details) => {\r\n    return {\r\n        type: \"ROOM_NAME_HANDLER\",\r\n        roomName: roomName,\r\n        contact: contact,\r\n        details: details\r\n    }\r\n}\r\n\r\nexport const contactDetails = (details) => {\r\n    return {\r\n        type: \"CONTACT_DATA\",\r\n        details: details\r\n    }\r\n}\r\n\r\nexport const logoutHandler = () => {\r\n    return {\r\n        type: \"LOGOUT_HANDLER\"\r\n    }\r\n}","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\firebase.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\Spinner\\Spinner.js",[],["80","81"],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\Modal\\Modal.js",["82"],"import React from 'react';\r\nimport \"./Modal.scss\";\r\nimport Backdrop from \"../Backdrop/Backdrop\";\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nconst Modal = (props) => {\r\n    return (\r\n        \r\n        <React.Fragment>\r\n            {props.children ? <React.Fragment>\r\n                <div  className={props.openModal ? \"modal__container account\" : \"modal__container close\"}>\r\n                <form>\r\n                    <h4 className=\"modular__modalTitle\">{props.title}</h4>\r\n                    <p>{props.info1} : {props.data1}</p>\r\n                    <p>{props.info2} : {props.data2}</p>\r\n                    <p>{props.info3} : {props.data3}</p>\r\n                </form>\r\n            </div>\r\n            </React.Fragment>\r\n            : \r\n            <React.Fragment><Backdrop show={props.show} click={props.click}/>\r\n            <CSSTransition in={props.show} timeout={300} classNames={\"modal-transition\"} unmountOnExit >\r\n            <div className=\"modal__container\" >\r\n                <form>\r\n                    <h4>{props.errorMessage}</h4>\r\n                    <label>Choose a new conversation name</label>\r\n                    <input className={props.errorMessage ? \"errorInput\" : null} placeholder=\"Name\" onChange={(e) => props.change(e)}/>\r\n                    <label>Add the pseudo of your the receiver:</label>\r\n                    <div className=\"modal__addPerson\">\r\n                        <input className={props.errorMessage ? \"errorInput\" : null} type=\"text\" placeholder=\"Pseudo\" onChange={(e) => props.changeContact(e)}/>\r\n                    </div>\r\n                    <div className=\"modal__button\">\r\n                        <button onClick={props.ok}>OK</button>\r\n                        <button onClick={props.click}>Cancel</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            </CSSTransition></React.Fragment>\r\n            }\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Modal;","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\Backdrop\\Backdrop.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\FeatureMenu\\FeatureMenu.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":8,"column":18,"nodeType":"89","messageId":"90","endLine":8,"endColumn":28},{"ruleId":"87","severity":1,"message":"91","line":97,"column":15,"nodeType":"89","messageId":"90","endLine":97,"endColumn":21},{"ruleId":"92","severity":1,"message":"93","line":184,"column":57,"nodeType":"94","messageId":"95","endLine":184,"endColumn":59},{"ruleId":"96","severity":1,"message":"97","line":90,"column":8,"nodeType":"98","endLine":90,"endColumn":10,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":7,"column":26,"nodeType":"102","endLine":7,"endColumn":48},{"ruleId":"87","severity":1,"message":"103","line":63,"column":13,"nodeType":"89","messageId":"90","endLine":63,"endColumn":26},{"ruleId":"83","replacedBy":"104"},{"ruleId":"85","replacedBy":"105"},{"ruleId":"87","severity":1,"message":"106","line":5,"column":8,"nodeType":"89","messageId":"90","endLine":5,"endColumn":15},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'IconButton' is defined but never used.","Identifier","unusedVar","'upload' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.userId'. Either include it or remove the dependency array.","ArrayExpression",["109"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'pseudoFetched' is assigned a value but never used.",["107"],["108"],"'AddIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},"Update the dependencies array to be: [props.userId]",{"range":"112","text":"113"},[3170,3172],"[props.userId]"]