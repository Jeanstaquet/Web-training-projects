[{"C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\index.js":"1","C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\reportWebVitals.js":"2","C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\App.js":"3","C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\containers\\Board\\Board.js":"4","C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\components\\Card\\Card.js":"5","C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\components\\UI\\Banner.js":"6","C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\store\\board.js":"7","C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\components\\Auth\\Auth.js":"8"},{"size":935,"mtime":1607696184774,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":493,"mtime":1607705503400,"results":"12","hashOfConfig":"10"},{"size":7951,"mtime":1607695477706,"results":"13","hashOfConfig":"10"},{"size":594,"mtime":1607523872143,"results":"14","hashOfConfig":"10"},{"size":283,"mtime":1607561807050,"results":"15","hashOfConfig":"10"},{"size":4352,"mtime":1607651061694,"results":"16","hashOfConfig":"10"},{"size":1575,"mtime":1607705479867,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1hv76z3",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\index.js",[],["37","38"],"C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\reportWebVitals.js",[],"C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\App.js",["39"],"C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\containers\\Board\\Board.js",["40","41"],"import React, { useCallback, useEffect } from 'react';\r\nimport \"./Board.scss\"\r\nimport Card from \"../../components/Card/Card\";\r\nimport Banner from \"../../components/UI/Banner\";\r\nimport {connect, batch} from \"react-redux\"\r\n\r\nconst Board = (props) => {\r\n\r\n    const cardDistributor = (nbr) => {\r\n        const arr = []\r\n        for(let i = 0; i < nbr; i++) {\r\n            let randomSuits =  props.suits[Math.floor(Math.random() * props.suits.length)];\r\n            let randomCardVal = props.cardValues[Math.floor(Math.random() * props.cardValues.length)];\r\n\r\n            arr.push({cardVal: randomCardVal, suits: randomSuits})\r\n            if(randomCardVal === \"A\") {\r\n                props.aceAppeardHandler()\r\n            }   \r\n        }\r\n        return arr\r\n    }\r\n\r\n\r\n    const playerPointsHandler = () => {\r\n        console.log(\"player\")\r\n        let points = 0\r\n        for(let i = 0; i < props.cardPlayer.length; i++) {\r\n            if(!isNaN(props.cardPlayer[i].cardVal)) {\r\n                points += Number(props.cardPlayer[i].cardVal)\r\n            } else if(props.cardPlayer[i].cardVal === \"A\"){\r\n                points += props.aceValue\r\n            } else {\r\n                points += 10\r\n            }\r\n        }\r\n        let dealerPoint = 0;\r\n        for(let i = 0; i < props.cardDealer.length; i++) {\r\n            if(!isNaN(props.cardDealer[i].cardVal)) {\r\n                dealerPoint += Number(props.cardDealer[i].cardVal)\r\n            } else if(props.cardDealer[i].cardVal === \"A\"){\r\n                dealerPoint += props.aceValue;\r\n            } else {\r\n                dealerPoint += 10\r\n            }\r\n        }\r\n\r\n        batch(() => {\r\n            props.dealerPointsHandler(dealerPoint)\r\n            props.playerPointsHandler(points)\r\n        })\r\n\r\n        if(points > 21) {\r\n            props.lost()\r\n        } else if(points === 21) {\r\n            props.win()\r\n        } else if(dealerPoint === 21) {\r\n            props.lost()\r\n        } else if(dealerPoint > 21) {\r\n            props.win()\r\n        } else if((dealerPoint > points) && points <= 18){\r\n            props.lost()\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const newGame = () => {\r\n        props.newGame()\r\n        props.cardDHandler(\"player\", \"two\", cardDistributor(2))\r\n    }\r\n\r\n\r\n    const stopHandler = () => {\r\n        console.log(\"stop\")\r\n        if (props.dealerPoints < 10) {\r\n            props.cardDHandler(\"dealer\", \"one\", cardDistributor(1))\r\n            if(props.dealerPoints < 12) {\r\n                props.cardDHandler(\"dealer\", \"one\", cardDistributor(1))\r\n            }\r\n        } else if (props.dealerPoints <= 13) {\r\n            props.cardDHandler(\"dealer\", \"one\", cardDistributor(1))\r\n            if(props.dealerPoints < 15) {\r\n                props.cardDHandler(\"dealer\", \"one\", cardDistributor(1))\r\n            }\r\n        } else if(props.dealerPoints >= 15 && props.dealerPoints < props.playerPoints) {\r\n            props.finishedHandler(true)\r\n            props.cardDHandler(\"dealer\", \"one\", cardDistributor(1))\r\n        } else if(props.dealerPoints >= 21) {\r\n            props.finishedHandler(true)\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        playerPointsHandler();\r\n        console.log(\"ueffect\")\r\n    }, [props.cardPlayer, playerPointsHandler, props.cardDealer, props.dealerPoints, props.gameFinished])\r\n\r\n\r\n    let banner = null;\r\n    if(props.gameFinished) {\r\n        banner = <Banner mess={props.message} amount={props.playerBet}/>\r\n    }\r\n    return (\r\n        <div className=\"board__container\">\r\n            <div className=\"board__game\">\r\n                {banner}\r\n                <div className=\"player__board\">\r\n                    <div>\r\n                        <h3>You</h3>\r\n                    <p>💰 Money available: <span className=\"moneyAvailable\">{props.playerMoney}$</span></p>\r\n                    </div>\r\n                    <div className=\"card__container\">\r\n                        {props.cardPlayer.map((c, index) => {\r\n                            return <Card\r\n                                aceClicked={props.aceClicked} \r\n                                addAce={() => props.aceHandler(11)}\r\n                                key={index} \r\n                                cardValues={c.cardVal} \r\n                                suits={c.suits}/>\r\n                        })}\r\n                    </div>\r\n                    <div className=\"player__button\">\r\n                        <h2>Acutal Points: {props.playerPoints}</h2>\r\n                        <div>\r\n                        <button disabled={props.gameFinished} onClick={() => stopHandler}>💲 Stop</button>\r\n                        <label>Amount:</label>\r\n                        <input disabled={!props.gameFinished} value={props.playerBet} onChange={(e) => props.bet(e.target.value)} type=\"number\" step=\"25\" placeholder=\"Insert money\" min=\"0\"/>\r\n                        <button onClick={() => props.cardDHandler(\"player\", \"one\", cardDistributor(1))} disabled={props.aceAppeard || props.gameFinished}>Card</button>\r\n                        <button onClick={() => newGame()}>New Game</button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"dealer__board\">\r\n                    <div>\r\n                        <h3>The Dealer</h3>\r\n                        <p>💰 Cash available in the bank: <span className=\"moneyAvailable\">{props.dealerMoney}$</span></p>\r\n                    </div>\r\n                    <div className=\"card__container\">\r\n                    {props.cardDealer.map((c, index) => {\r\n                            return <Card\r\n                                aceClicked={props.aceClicked} \r\n                                addAce={() => props.aceHandler(11)} \r\n                                key={index} \r\n                                cardValues={c.cardVal} \r\n                                suits={c.suits}/>\r\n                        })}\r\n                        </div>\r\n                    <div className=\"dealer__button\">\r\n                        <h2>Actual Points: {props.dealerPoints}</h2>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        gameFinished: state.gameFinished,\r\n        playerMoney: state.playerMoney,\r\n        dealerMoney: state.dealerMoney,\r\n        message: state.message,\r\n        playerBet: state.playerBet,\r\n        aceAppeard: state.aceAppeard,\r\n        aceValue: state.aceValue,\r\n        aceClicked: state.aceClicked,\r\n        playerPoints: state.playerPoints,\r\n        dealerPoints: state.dealerPoints,\r\n        finished: state.finished,\r\n        suits: state.suits,\r\n        cardValues: state.cardValues,\r\n        cardPlayer: state.cardPlayer,\r\n        cardDealer: state.cardDealer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        bet: (p) => dispatch({type: \"BET\", payload: p}),\r\n        newGame: () => dispatch({type: \"NEW_GAME\"}),\r\n        win: () => dispatch({type: \"WIN\"}),\r\n        lost: () => dispatch({type: \"LOST\"}),\r\n        aceAppeardHandler: () => dispatch({type: \"ACE_APPEARED\"}),\r\n        aceValueHandler: (d) => dispatch({type: \"ACE_VALUE\", payload: d}),\r\n        aceClickedHandler: () => dispatch({type: \"ACE_CLICKED\"}),\r\n        aceHandler: (p) => dispatch({type: \"ACE_HANDLER\", payload: p}),\r\n        playerPointsHandler: (p) => dispatch({type: \"PLAYER_POINTS\", payload: p}),\r\n        dealerPointsHandler: (p) => dispatch({type: \"DEALER_POINTS\", payload: p}),\r\n        finishedHandler: (p) => dispatch({type: \"FINISHED\", payload: p}),\r\n        cardPlayerHandler: (p) => dispatch({type: \"CARD_PLAYER\", payload: p}),\r\n        cardDealerHandler: (p) => dispatch({type: \"CARD_DEALER\", payload: p}),\r\n        cardDHandler: (p, n, nC) => dispatch({type: \"CARD_DISTRIBUTOR\", persona: p, number: n, newCard: nC}),\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);","C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\components\\Card\\Card.js",[],"C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\components\\UI\\Banner.js",[],"C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\store\\board.js",["42"],"const initalState = {\r\n    gameFinished: false,\r\n    playerMoney: 1500,\r\n    dealerMoney: 100000,\r\n    message: \"\",\r\n    playerBet: 0,\r\n    aceAppeard: false,\r\n    aceValue: 0,\r\n    aceClicked: false,\r\n    playerPoints: 0,\r\n    dealerPoints: 0,\r\n    finished: false,\r\n    suits: [\"spades\", \"diamonds\", \"clubs\", \"hearts\"],\r\n    cardValues: [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"],\r\n    cardPlayer: [],\r\n    cardDealer: [],\r\n}\r\n\r\nconst reducer = (state = initalState, action) => {\r\n    switch(action.type) {\r\n        case \"BET\":\r\n            return {\r\n                ...state, playerBet: action.payload\r\n            }\r\n        case \"NEW_GAME\":\r\n            return {\r\n                ...state,\r\n                gameFinished: false,\r\n                aceAppeard: false,\r\n                aceValue: 0,\r\n                aceClicked: false,\r\n                finished: false,\r\n                cardDealer: [],\r\n                cardPlayer: []\r\n            }\r\n        case \"WIN\":\r\n            return {\r\n                ...state, \r\n                gameFinished: true, \r\n                dealerMoney: state.dealerMoney - state.playerBet,\r\n                playerMoney: state.playerBet + state.playerMoney,\r\n                message: \"You win 👍\"\r\n            }\r\n        case \"LOST\":\r\n            return {\r\n                ...state,\r\n                gameFinished: true,\r\n                dealerMoney: state.dealerMoney + state.playerBet,\r\n                playerMoney: state.playerMoney - state.playerBet ,\r\n                message: \"You lost 👎\"\r\n            }\r\n        case \"ACE_APPEARED\":\r\n            return {\r\n                ...state,\r\n                aceAppeard: true\r\n            }\r\n        case \"ACE_VALUE\":\r\n            return {\r\n                ...state,\r\n                aceValue: action.payload,\r\n                aceClicked: true\r\n            }\r\n        case \"ACE_CLICKED\":\r\n            return {\r\n                ...state,\r\n                aceClicked: true\r\n            }\r\n        case \"ACE_HANDLER\":\r\n            let p = 0\r\n            if(action.payload === 11) {\r\n                return {\r\n                    ...state,\r\n                    aceAppeard: false,\r\n                    aceValue: 11,\r\n                    playerPoints: p,\r\n                    aceClicked: true\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    aceAppeard: false,\r\n                    aceValue: 1,\r\n                    playerPoints: p,\r\n                    aceClicked: true\r\n                }\r\n            }\r\n        case \"PLAYER_POINTS\":\r\n            return {\r\n                ...state,\r\n                playerPoints: action.payload\r\n            }\r\n        case \"DEALER_POINTS\":\r\n            return {\r\n                ...state,\r\n                dealerPoint: action.payload\r\n            }\r\n        case \"FINISHED\":\r\n            return {\r\n                ...state,\r\n                finished: action.payload\r\n            }\r\n        case \"CARD_PLAYER\":\r\n            return {\r\n                ...state,\r\n                cardPlayer: [action.payload]\r\n            }\r\n        case \"CARD_DEALER\":\r\n            return {\r\n                ...state,\r\n                cardDealer: [action.payload]\r\n            }\r\n        case \"CARD_DISTRIBUTOR\":\r\n            if(action.persona === \"player\"){\r\n                if(action.number === \"one\") {\r\n                    return {...state,\r\n                            cardPlayer:[...state.cardPlayer, ...action.newCard]}\r\n                } else if(action.number === \"two\") {\r\n                    return {\r\n                        ...state,\r\n                        cardPlayer: [...action.newCard]\r\n                    }\r\n                }\r\n            } else if(action.persona === \"dealer\") {\r\n                if(action.number === \"one\") {\r\n                    return {\r\n                        ...state,\r\n                        cardDealer: [...state.cardDealer, ...action.newCard]\r\n                    }\r\n                } else if(action.number === \"two\") {\r\n                    return {\r\n                        ...state,\r\n                        cardDealer: [...action.newCard]\r\n                    }\r\n                }\r\n            }\r\n        default:\r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n}\r\n\r\nexport default reducer;","C:\\Users\\Jean\\Web-training-projects\\fullstack-blackjack\\src\\components\\Auth\\Auth.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":3,"column":8,"nodeType":"49","messageId":"50","endLine":3,"endColumn":13},{"ruleId":"47","severity":1,"message":"51","line":1,"column":17,"nodeType":"49","messageId":"50","endLine":1,"endColumn":28},{"ruleId":"52","severity":1,"message":"53","line":24,"column":11,"nodeType":"54","endLine":64,"endColumn":6},{"ruleId":"55","severity":1,"message":"56","line":136,"column":9,"nodeType":"57","messageId":"58","endLine":139,"endColumn":14},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'Board' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","react-hooks/exhaustive-deps","The 'playerPointsHandler' function makes the dependencies of useEffect Hook (at line 96) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'playerPointsHandler' in its own useCallback() Hook.","VariableDeclarator","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-global-assign","no-unsafe-negation"]